import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import convolve2d

class ImageProcessor:
    def __init__(self, image_path):
        if not os.path.exists(image_path):
            raise ValueError(f"The image path does not exist: {image_path}")
        
        # Load the image
        self._img_np = cv2.imread(image_path)
        if self._img_np is None:
            raise ValueError(f"Image not found or unable to load: {image_path}")
        
        self._img_np = cv2.cvtColor(self._img_np, cv2.COLOR_BGR2RGB)  # Convert from BGR to RGB
        self._grayscale_np = None
        self._blurred_np = None
        self._gradient_magnitude = None
        self._gradient_direction = None
        self._suppressed_img = None
        self._connected_edges = None
        self._canny_img = None

    def grayscale(self):
        ''' Convert image (RGB) color to grayscale '''
        self._grayscale_np = np.dot(self._img_np[..., :3], [0.2989, 0.5870, 0.1140])
        return self

    def gaussian_kernel(self, size, sigma):
        ''' Generate a Gaussian kernel of a given size and standard deviation '''
        kernel = np.fromfunction(
            lambda x, y: (1 / (2 * np.pi * sigma ** 2)) * 
                          np.exp(-((x - size // 2) ** 2 + (y - size // 2) ** 2) / (2 * sigma ** 2)),
            (size, size)
        )
        return kernel / np.sum(kernel)

    def gaussian_blur(self, size, sigma=2.5):
        ''' Apply Gaussian blur to the grayscale image '''
        kernel = self.gaussian_kernel(size, sigma)
        self._blurred_np = convolve2d(self._grayscale_np, kernel, mode='same', boundary='symm', fillvalue=0)
        return self

    def gradient_approximation(self):
        ''' Approximate the magnitude of the gradient '''
        horizontal_filter = np.array([[-1, 0, 1],
                                       [-2, 0, 2],
                                       [-1, 0, 1]])
        vertical_filter = np.transpose(horizontal_filter)
        
        horizontal_gradient = convolve2d(self._blurred_np, horizontal_filter, mode='same', boundary='symm', fillvalue=0)
        vertical_gradient = convolve2d(self._blurred_np, vertical_filter, mode='same', boundary='symm', fillvalue=0)
        
        self._gradient_magnitude = np.sqrt(horizontal_gradient ** 2 + vertical_gradient ** 2)
        self._gradient_direction = np.arctan2(vertical_gradient, horizontal_gradient)
        return self

    def non_max_suppression(self):
        ''' Suppress non-maximum pixels in the direction of the gradient '''
        self._suppressed_img = np.zeros_like(self._gradient_magnitude)
        
        for x in range(self._gradient_magnitude.shape[0]):
            for y in range(self._gradient_magnitude.shape[1]):
                angle = self._gradient_direction[x, y] * (180.0 / np.pi)  # Convert to degrees
                angle = angle + 180 if angle < 0 else angle  # Adjust angle to be in [0, 360]
                
                # Define neighboring pixel indices based on gradient direction
                if (0 <= angle < 22.5) or (157.5 <= angle <= 180):
                    neighbor1_i, neighbor1_j = x, y + 1
                    neighbor2_i, neighbor2_j = x, y - 1
                elif (22.5 <= angle < 67.5):
                    neighbor1_i, neighbor1_j = x - 1, y + 1
                    neighbor2_i, neighbor2_j = x + 1, y - 1
                elif (67.5 <= angle < 112.5):
                    neighbor1_i, neighbor1_j = x - 1, y
                    neighbor2_i, neighbor2_j = x + 1, y
                elif (112.5 <= angle < 157.5):
                    neighbor1_i, neighbor1_j = x - 1, y - 1
                    neighbor2_i, neighbor2_j = x + 1, y + 1
                else:
                    neighbor1_i, neighbor1_j = x - 1, y
                    neighbor2_i, neighbor2_j = x + 1, y
                
                # Check if neighbor indices are within bounds
                neighbor1_i = max(0, min(neighbor1_i, self._gradient_magnitude.shape[0] - 1))
                neighbor1_j = max(0, min(neighbor1_j, self._gradient_magnitude.shape[1] - 1))
                neighbor2_i = max(0, min(neighbor2_i, self._gradient_magnitude.shape[0] - 1))
                neighbor2_j = max(0, min(neighbor2_j, self._gradient_magnitude.shape[1] - 1))
                
                # Compare current pixel magnitude with its neighbors along gradient direction
                current_mag = self._gradient_magnitude[x, y]
                neighbor1_mag = self._gradient_magnitude[neighbor1_i, neighbor1_j]
                neighbor2_mag = self._gradient_magnitude[neighbor2_i, neighbor2_j]
                
                # Perform suppression
                if (current_mag >= neighbor1_mag) and (current_mag >= neighbor2_mag):
                    self._suppressed_img[x, y] = current_mag
                else:
                    self._suppressed_img[x, y] = 0
        return self

    def double_thresholding(self, low_threshold_ratio=0.1, high_threshold_ratio=0.3):
        ''' Categorize pixels into strong, weak, and non-edges '''
        h_threshold = np.max(self._gradient_magnitude) * high_threshold_ratio
        l_threshold = h_threshold * low_threshold_ratio
        
        strong_edges = (self._gradient_magnitude >= h_threshold)
        weak_edges = (self._gradient_magnitude >= l_threshold) & (self._gradient_magnitude < h_threshold)
        
        self._connected_edges = np.zeros_like(self._gradient_magnitude)
        self._connected_edges[strong_edges] = 255
        
        for x in range(self._gradient_magnitude.shape[0]):
            for y in range(self._gradient_magnitude.shape[1]):
                if weak_edges[x, y]:
                    if (strong_edges[x - 1:x + 2, y - 1:y + 2].any()):
                        self._connected_edges[x, y] = 255
        return self

    def hysteresis(self, weak_pixel_intensity=50, strong_pixel_intensity=255):
        ''' Connect weak edges to strong edges and reject isolated weak edges '''
        self._canny_img = self._connected_edges.copy()
        
        weak_edges_x, weak_edges_y = np.where(self._canny_img == weak_pixel_intensity)
        for x, y in zip(weak_edges_x, weak_edges_y):
            if np.any(self._connected_edges[x - 1:x + 2, y - 1:y + 2] == strong_pixel_intensity):
                self._canny_img[x, y] = strong_pixel_intensity
            else:
                self._canny_img[x, y] = 0
        return self

    def show_image(self, image, title='Image'):
        plt.imshow(image, cmap='gray' if len(image.shape) == 2 else None)
        plt.axis('off')
        plt.title(title)
        plt.show()

# Example usage:
image_path = 'G:\KULIAH\SEM 5\RSBP\Detection-of-bacteria-in-water-using-Yolo-images\dataset\EMDS7\EMDS7-G039-080-0400.png'  # Replace with your image path
image_processor = ImageProcessor(image_path)

# Convert to grayscale, apply Gaussian blur, and perform edge detection
image_processor.grayscale().gaussian_blur(size=5, sigma=2.5).gradient_approximation().non_max_suppression().double_thresholding().hysteresis()

# Show the final Canny edge detected image
image_processor.show_image(image_processor._canny_img, title='Canny Edge Detected Image')
